<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jie Blog</title>
    <link>http://example.org/</link>
    <description>Recent content on Jie Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Oct 2021 14:49:38 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode 周赛 265</title>
      <link>http://example.org/leetcode/week-265/</link>
      <pubDate>Sun, 31 Oct 2021 14:49:38 +0800</pubDate>
      
      <guid>http://example.org/leetcode/week-265/</guid>
      <description>LeetCode 265场周赛题解    5914. 值相等的最小索引    给你一个下标从 0 开始的整数数组 nums ，返回 nums 中满足 i mod 10 == nums[i] 的最小下标 i ；如果不存在这样的下标，返回 -1 。
x mod y 表示 x 除以 y 的 余数 。
思路 直接比较
代码
class Solution: def smallestEqual(self, nums: List[int]) -&amp;gt; int: for i, num in enumerate(nums): if i % 10 == num: return i return -1 5915. 找出临界点之间的最小和最大距离    思路 先找出所有的临界值，无论是最大还是最小，都把坐标放到数组中，最后最大距离就是排序的两端距离，最小距离需要遍历数组</description>
    </item>
    
    <item>
      <title>LeetCode 周赛 264</title>
      <link>http://example.org/leetcode/week-264/</link>
      <pubDate>Sun, 24 Oct 2021 20:31:38 +0800</pubDate>
      
      <guid>http://example.org/leetcode/week-264/</guid>
      <description>LeetCode 264场周赛题解    2047. 句子中的有效单词数    思路 直接模拟检查，注意这里的&#39;-&amp;lsquo;符号两边是指该符号的左右两边，检查有点繁琐
代码
class Solution: def is_valid(self, token: str) -&amp;gt; int: for c in token: if c &amp;gt;= &amp;#39;0&amp;#39; and c &amp;lt;= &amp;#39;9&amp;#39;: return 0 if c &amp;gt;= &amp;#39;A&amp;#39; and c &amp;lt;= &amp;#39;Z&amp;#39;: return 0 if token[0] == &amp;#39;-&amp;#39; or token[len(token)-1] == &amp;#39;-&amp;#39;: return 0 num_her = 0 num_other = 0 for c in token: if c == &amp;#39;-&amp;#39;: num_her += 1 elif c &amp;lt; &amp;#39;a&amp;#39; or c &amp;gt; &amp;#39;z&amp;#39;: num_other += 1 if num_her &amp;gt; 1: return 0 elif num_her == 1: for i in range(len(token)): if token[i] == &amp;#39;-&amp;#39;: if i &amp;gt; 0: if token[i-1] &amp;lt; &amp;#39;a&amp;#39; or token[i-1] &amp;gt; &amp;#39;z&amp;#39;: return 0 if i &amp;lt; len(token) -1: if token[i+1] &amp;lt; &amp;#39;a&amp;#39; or token[i+1] &amp;gt; &amp;#39;z&amp;#39;: return 0 break if num_other &amp;gt; 1: return 0 if num_other: if token[-1] &amp;lt; &amp;#39;a&amp;#39; or token[-1] &amp;gt; &amp;#39;z&amp;#39;: return 1 else: return 0 return 1 def countValidWords(self, sentence: str) -&amp;gt; int: ret = 0 for token in sentence.</description>
    </item>
    
    <item>
      <title>git rebase 命令</title>
      <link>http://example.org/tools/git_rebase/</link>
      <pubDate>Wed, 20 Oct 2021 18:00:50 +0800</pubDate>
      
      <guid>http://example.org/tools/git_rebase/</guid>
      <description>git rebase 可以将当前的commit 转移到其他commit 的基础上，主要是改写了commit hisotry，因此可以解决很多问题，例如合并多个commit，将当前分支基于其他分支进行合并等。
 使用rebase合并多个commit     当做一些项目调试时可能因为加临时代码会有多个commit, git log显得冗长，可以使用git rebase 在本地将多个commit 进行合并后再push上去。 首先git log确定开始和结束的commit id范围，例如合并前3次commit可以这样操作：
git rebase -i HEAD~3
这样就会进入交互界面，在前两次使用squash可以合并到后一次commit，常用的操作有：    命令 用途     pick 使用该commit   reword 修改commit 消息   squash 保留该commit，但合并到上一个commit   fixup 类似squash，但去掉commit message   drop 删除该commit    之后将后面的操作由pick变更为squash，然后:x(使用默认编辑器是vi的话)保存退出
然后进入修改commit message的页面，可以考虑删掉前面几次的commit message，然后在最近的进行修改即可。完成后保存退出即可。
之后使用git log即可看到自己的commit history被改写了，然后push即可。
 使用rebase在多个开发时解决冲突     日常开发过程中一般都是一个项目同个需求有多人合作开发，当开发完成代码后可能因为其他同事上传了已完成的代码导致出现某些冲突，或者想要将自己的代码基于同事的代码继续开发，都可以使用rebase进行合并。</description>
    </item>
    
    <item>
      <title>LeetCode 周赛 263</title>
      <link>http://example.org/leetcode/week-263/</link>
      <pubDate>Mon, 18 Oct 2021 19:11:38 +0800</pubDate>
      
      <guid>http://example.org/leetcode/week-263/</guid>
      <description>LeetCode 263场周赛题解    1. 检查句子中的数字是否递增    句子是由若干 token 组成的一个列表，token 间用 单个 空格分隔，句子没有前导或尾随空格。每个 token 要么是一个由数字 0-9 组成的不含前导零的 正整数 ，要么是一个由小写英文字母组成的 单词 。
示例，&amp;ldquo;a puppy has 2 eyes 4 legs&amp;rdquo; 是一个由 7 个 token 组成的句子：&amp;ldquo;2&amp;rdquo; 和 &amp;ldquo;4&amp;rdquo; 是数字，其他像 &amp;ldquo;puppy&amp;rdquo; 这样的 tokens 属于单词。 给你一个表示句子的字符串 s ，你需要检查 s 中的 全部 数字是否从左到右严格递增（即，除了最后一个数字，s 中的 每个 数字都严格小于它 右侧 的数字）。
如果满足题目要求，返回 true ，否则，返回 false 。
输入：s = &amp;ldquo;1 box has 3 blue 4 red 6 green and 12 yellow marbles&amp;rdquo; 输出：true 解释：句子中的数字是：1, 3, 4, 6, 12 。 这些数字是按从左到右严格递增的 1 &amp;lt; 3 &amp;lt; 4 &amp;lt; 6 &amp;lt; 12 。</description>
    </item>
    
    <item>
      <title>Python 代码插桩及语法树分析</title>
      <link>http://example.org/posts/ast/</link>
      <pubDate>Sun, 17 Oct 2021 22:33:39 +0800</pubDate>
      
      <guid>http://example.org/posts/ast/</guid>
      <description>python支持对编写的程序进行源代码的改动，例如通过AST模块将代码进行解析成语法树，然后在遍历语法节点的过程中对代码进行改动
本文主要讨论Python的ast语法解析及代码插桩过程。
 Python的ast功能    字符串代码解释    Python支持执行以字符串形式提供的源代码，例如：
&amp;gt;&amp;gt;&amp;gt; x = 42 &amp;gt;&amp;gt;&amp;gt; eval(&amp;#39;2 + 3*4 + x&amp;#39;) 56 &amp;gt;&amp;gt;&amp;gt; exec(&amp;#39;for i in range(5): print(i)&amp;#39;) 0 1 2 3 4 Python 语法树转换    可以使用ast模块将python源代码编译为一个抽象语法树，这样就可以分析源代码，例如：
&amp;gt;&amp;gt;&amp;gt; import ast &amp;gt;&amp;gt;&amp;gt; ex = ast.parse(&amp;#39;2 + 3*4 +x&amp;#39;, mode=&amp;#39;eval&amp;#39;) &amp;gt;&amp;gt;&amp;gt; ex &amp;lt;ast.Expression object at 0x7f19a73c1d90&amp;gt; &amp;gt;&amp;gt;&amp;gt; ast.dump(ex) &amp;#34;Expression(body=BinOp(left=BinOp(left=Constant(value=2), op=Add(), right=BinOp(left=Constant(value=3), op=Mult(), right=Constant(value=4))), op=Add(), right=Name(id=&amp;#39;x&amp;#39;, ctx=Load())))&amp;#34; ast的parse方法会将源代码解析为语法树的节点，mode参数可以选择为:
 exec, 代表编译一个模块 single, 一个单独的语句 eval，一个表达式 通过dump方法可以看到展开的语法树，树的结构如下图：   ast模块支持对各个树的节点进行操作，通过定义一个访问者类，在类中实现了各种的visit_NodeName()方法，把感兴趣的节点保留下来</description>
    </item>
    
    <item>
      <title>Python 代码插桩及语法树分析</title>
      <link>http://example.org/python/ast/</link>
      <pubDate>Sun, 17 Oct 2021 22:33:39 +0800</pubDate>
      
      <guid>http://example.org/python/ast/</guid>
      <description>python支持对编写的程序进行源代码的改动，例如通过AST模块将代码进行解析成语法树，然后在遍历语法节点的过程中对代码进行改动
本文主要讨论Python的ast语法解析及代码插桩过程。
 Python的ast功能    字符串代码解释    Python支持执行以字符串形式提供的源代码，例如：
&amp;gt;&amp;gt;&amp;gt; x = 42 &amp;gt;&amp;gt;&amp;gt; eval(&amp;#39;2 + 3*4 + x&amp;#39;) 56 &amp;gt;&amp;gt;&amp;gt; exec(&amp;#39;for i in range(5): print(i)&amp;#39;) 0 1 2 3 4 Python 语法树转换    可以使用ast模块将python源代码编译为一个抽象语法树，这样就可以分析源代码，例如：
&amp;gt;&amp;gt;&amp;gt; import ast &amp;gt;&amp;gt;&amp;gt; ex = ast.parse(&amp;#39;2 + 3*4 +x&amp;#39;, mode=&amp;#39;eval&amp;#39;) &amp;gt;&amp;gt;&amp;gt; ex &amp;lt;ast.Expression object at 0x7f19a73c1d90&amp;gt; &amp;gt;&amp;gt;&amp;gt; ast.dump(ex) &amp;#34;Expression(body=BinOp(left=BinOp(left=Constant(value=2), op=Add(), right=BinOp(left=Constant(value=3), op=Mult(), right=Constant(value=4))), op=Add(), right=Name(id=&amp;#39;x&amp;#39;, ctx=Load())))&amp;#34; ast的parse方法会将源代码解析为语法树的节点，mode参数可以选择为:
 exec, 代表编译一个模块 single, 一个单独的语句 eval，一个表达式 通过dump方法可以看到展开的语法树，树的结构如下图：   ast模块支持对各个树的节点进行操作，通过定义一个访问者类，在类中实现了各种的visit_NodeName()方法，把感兴趣的节点保留下来</description>
    </item>
    
  </channel>
</rss>
